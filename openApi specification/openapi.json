{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0",
    "title": "OVI - online video provenance",
    "description": "A web app that is able to model and manage information about various video resources available online.",
    "contact": {
      "name": "OVI team",
      "url": "https://project-wade.jimdofree.com/"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Data querying service"
    },
    {
      "url": "http://localhost:3002",
      "description": "Sparql service"
    },
    {
      "url": "http://localhost:3003",
      "description": "Dataset manipulation service"
    }
  ],
  "paths": {
    "/movie/{title}": {
      "servers": [
        {
          "url": "http://localhost:3001",
          "description": "Data querying service"
        }
      ],
      "get": {
        "description": "Get rdf representation of information about the movie identified by the title from the dataset.",
        "parameters": [
          {
            "name": "title",
            "in": "path",
            "description": "The title of the movie we wish to search.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Inception"
          }
        ],
        "responses": {
          "200": {
            "description": "Response containing data associated to the movie",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMovieByTitleResponse200"
                }
              }
            }
          },
          "400": {
            "description": "Error message for bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMovieByTitleResponse400"
                }
              }
            }
          },
          "404": {
            "description": "Error message saying the resource was not found in the current dataset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMovieByTitleResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Error message for internal errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMovieByTitleResponse500"
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "servers": [
        {
          "url": "http://localhost:3002",
          "description": "Sparql service"
        }
      ],
      "get": {
        "description": "Get rdf representation of information about the movie identified by the title from the dataset.",
        "parameters": [
          {
            "name": "queryText",
            "in": "query",
            "description": "The query that will run on the existing dataset.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "SELECT ?movie ?genre ?budget WHERE { ?movie a ownDataset:Film . ?movie a ownDataset:CreativeWork ; ownDataset:genre ?genre ;  ownDataset:budget ?budget  } LIMIT 100"
          }
        ],
        "responses": {
          "200": {
            "description": "Response containing data specified in the query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SparqlQueryResponse200"
                }
              }
            }
          },
          "400": {
            "description": "Error message for bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SparqlQueryResponse400"
                }
              }
            }
          },
          "404": {
            "description": "Error message saying the resource was not found in the current dataset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SparqlQueryResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Error message for internal errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SparqlQueryResponse500"
                }
              }
            }
          }
        }
      }
    },
    "/{title}": {
      "servers": [
        {
          "url": "http://localhost:3003",
          "description": "Data manipulation service"
        }
      ],
      "post": {
        "description": "Queries dbpedia for the movie with the given title and, if results are found, adds them to the current dataset.",
        "parameters": [
          {
            "name": "title",
            "in": "path",
            "description": "The title of the movie we wish to search and add to our dataset.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Inception"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMovieByTitleResponse200"
                }
              }
            }
          },
          "400": {
            "description": "Error message for bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMovieByTitleResponse400"
                }
              }
            }
          },
          "404": {
            "description": "Error message saying the resource was not found in the dbpedia dataset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddMovieResponse404"
                }
              }
            }
          },
          "500": {
            "description": "Error message for internal errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMovieByTitleResponse500"
                }
              }
            }
          }
        }
      }
    },
    "/populateDataset/{numberOfEntries}": {
      "servers": [
        {
          "url": "http://localhost:3003",
          "description": "Data manipulation service"
        }
      ],
      "get": {
        "description": "Querries dbpedia for movies with a limit specified in the parameter. The movies are then added to the current dataset. Used for building the initial dataset of our application.",
        "parameters": [
          {
            "name": "numberOfEntries",
            "in": "path",
            "description": "The number of entries we wish to add in our dataset.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "int32"
            },
            "example": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "Ok message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PopulateDatasetResponse200"
                }
              }
            }
          },
          "400": {
            "description": "Error message for bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PopulateDatasetResponse400"
                }
              }
            }
          },
          "500": {
            "description": "Error message for internal errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMovieByTitleResponse500"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GetMovieByTitleResponse200": {
        "type": "object",
        "properties": {
          "http://localhost:3001/movie/Inception": {
            "type": "object",
            "properties": {
              "http://localhost:3001/resource/title": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "Inception"
                    },
                    "type": {
                      "type": "string",
                      "example": "literal"
                    },
                    "lang": {
                      "type": "string",
                      "example": "en"
                    }
                  }
                }
              },
              "http://localhost:3001/resource/director": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "Christopher Nolan"
                    },
                    "type": {
                      "type": "string",
                      "example": "literal"
                    }
                  }
                }
              },
              "http://localhost:3001/resource/genre": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "Action"
                    },
                    "type": {
                      "type": "string",
                      "example": "literal"
                    }
                  }
                }
              },
              "http://localhost:3001/resource/abstract": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O., but his tragic past may doom the project and his team to disaster."
                    },
                    "type": {
                      "type": "string",
                      "example": "literal"
                    }
                  }
                }
              },
              "http://localhost:3001/resource/language": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "English"
                    },
                    "type": {
                      "type": "string",
                      "example": "literal"
                    }
                  }
                }
              },
              "http://localhost:3001/resource/producer": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "Christopher Nolan"
                    },
                    "type": {
                      "type": "string",
                      "example": "literal"
                    }
                  }
                }
              },
              "http://localhost:3001/resource/writer": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "Christopher Nolan"
                    },
                    "type": {
                      "type": "string",
                      "example": "literal"
                    }
                  }
                }
              },
              "http://localhost:3001/resource/budget": {
                "properties": {
                  "value": {
                    "type": "string",
                    "example": "160 000 000$"
                  },
                  "type": {
                    "type": "string",
                    "example": "literal"
                  }
                }
              },
              "http://localhost:3001/resource/starring": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "Leonardo DiCaprio"
                    },
                    "type": {
                      "type": "string",
                      "example": "literal"
                    }
                  }
                }
              }
            }
          },
          "status": {
            "type": "string",
            "example": "OK"
          }
        }
      },
      "GetMovieByTitleResponse404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The movie you searched for doesn't exist in the current dataset."
          }
        }
      },
      "GetMovieByTitleResponse500": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Internal server error."
          }
        }
      },
      "GetMovieByTitleResponse400": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad request. Movie title may be in wrong format"
          }
        }
      },
      "SparqlQueryResponse200": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Movie": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "uri"
                    },
                    "value": {
                      "type": "string",
                      "example": "http://localhost:3001/movie/Inception"
                    }
                  }
                },
                "Genre": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "uri"
                    },
                    "value": {
                      "type": "string",
                      "example": "http://localhost:3001/resource/Action"
                    }
                  }
                },
                "Budget": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "literal"
                    },
                    "value": {
                      "type": "string",
                      "example": "160 000 000$"
                    }
                  }
                }
              }
            }
          },
          "status": {
            "type": "string",
            "example": "OK"
          }
        }
      },
      "SparqlQueryResponse404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The resources you searched for don't exist in the current dataset."
          }
        }
      },
      "SparqlQueryResponse500": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Internal server error."
          }
        }
      },
      "SparqlQueryResponse400": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad request. Possible wrong query format."
          }
        }
      },
      "AddMovieResponse404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Resource not found in the dbpedia dataset."
          }
        }
      },
      "PopulateDatasetResponse200": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Action successful. Current dataset populated with the given number of entries."
          }
        }
      },
      "PopulateDatasetResponse400": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad request. Possible wrong numberOfEntries format."
          }
        }
      }
    }
  }
}